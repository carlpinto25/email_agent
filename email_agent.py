from langchain.agents import initialize_agent, Tool
from langchain.agents.agent_types import AgentType
from langchain_ollama import OllamaLLM
from langchain.tools import tool
import smtplib
from dotenv import load_dotenv
import os
import gradio as gr

load_dotenv()

llm = OllamaLLM(model="mistral")

@tool
def send_email(input_str: str) -> str:
    """
    Send an email. Input format must be:
    'TO: recipient@example.com || Subject: ... || Body: ...'
    """
    #make sure to set your email and app password in the .env file
    sender = os.getenv("EMAIL_SENDER")
    password = os.getenv("EMAIL_PASSWORD")

    try:
        to_part, subject_part, body_part = input_str.split("||")
        recipient = to_part.replace("TO:", "").strip()
        subject = subject_part.replace("Subject:", "").strip()
        body = body_part.replace("Body:", "").strip()
    except Exception as e:
        return f"Invalid input format. Error: {e}"

    msg = f"Subject: {subject}\n\n{body}"

    try:
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, recipient, msg)
        return f"Email sent to {recipient}."
    except Exception as e:
        return f"Error sending email: {e}"

tools = [send_email]

agent = initialize_agent(
    tools=tools,
    llm=llm,
    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True
)
def run_agent(prompt):
    return agent.run(prompt)
gr.Interface(
    fn=run_agent,
    inputs=gr.Textbox(lines=4),
    outputs="text",
    title="LangChain Email Agent",
    description="Ask the agent to send an email having the email address, subject, and body which can be generated by the agent itself.",
).launch()

